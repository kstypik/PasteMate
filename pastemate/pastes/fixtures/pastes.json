[
{
  "model": "pastes.paste",
  "pk": 581,
  "fields": {
    "uuid": "04aa70be-ab38-461e-b625-e5041cb83e06",
    "author": 2,
    "content": "from django.http import HttpResponse\r\nfrom django.template import loader\r\n\r\nfrom .models import Question\r\n\r\n\r\ndef index(request):\r\n    latest_question_list = Question.objects.order_by('-pub_date')[:5]\r\n    template = loader.get_template('polls/index.html')\r\n    context = {\r\n        'latest_question_list': latest_question_list,\r\n    }\r\n    return HttpResponse(template.render(context, request))",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">latest_question_list</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">&#39;-pub_date&#39;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s1\">&#39;polls/index.html&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;latest_question_list&#39;</span><span class=\"p\">:</span> <span class=\"n\">latest_question_list</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">))</span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "python",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Django Polls Tutorial Views",
    "filesize": 395,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 582,
  "fields": {
    "uuid": "924920b1-2118-4e8e-9946-b800cbd48de3",
    "author": 2,
    "content": "r = requests.get('https://api.github.com/user', auth=('user', 'pass'))\r\n\r\nr.status_code\r\n200\r\n\r\nr.headers['content-type']\r\n'application/json; charset=utf8'\r\n\r\nr.encoding\r\n'utf-8'\r\n\r\nr.text\r\n'{\"type\":\"User\"...'\r\n\r\nr.json()\r\n{'private_gists': 419, 'total_private_repos': 77, ...}",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://api.github.com/user&#39;</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;user&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pass&#39;</span><span class=\"p\">))</span>\n\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"mi\">200</span>\n\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;content-type&#39;</span><span class=\"p\">]</span>\n<span class=\"s1\">&#39;application/json; charset=utf8&#39;</span>\n\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">encoding</span>\n<span class=\"s1\">&#39;utf-8&#39;</span>\n\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"s1\">&#39;{&quot;type&quot;:&quot;User&quot;...&#39;</span>\n\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">&#39;private_gists&#39;</span><span class=\"p\">:</span> <span class=\"mi\">419</span><span class=\"p\">,</span> <span class=\"s1\">&#39;total_private_repos&#39;</span><span class=\"p\">:</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "python",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Python's Requests Example",
    "filesize": 277,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 583,
  "fields": {
    "uuid": "a32f80c6-2c0b-4f64-aecc-8366e8b4702a",
    "author": 2,
    "content": "<?php\r\n\r\n$makefoo = true;\r\n\r\n/* We can't call foo() from here \r\n   since it doesn't exist yet,\r\n   but we can call bar() */\r\n\r\nbar();\r\n\r\nif ($makefoo) {\r\n  function foo()\r\n  {\r\n    echo \"I don't exist until program execution reaches me.\\n\";\r\n  }\r\n}\r\n\r\n/* Now we can safely call foo()\r\n   since $makefoo evaluated to true */\r\n\r\nif ($makefoo) foo();\r\n\r\nfunction bar() \r\n{\r\n  echo \"I exist immediately upon program start.\\n\";\r\n}\r\n\r\n?>",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"cp\">&lt;?php</span>\n\n<span class=\"nv\">$makefoo</span> <span class=\"o\">=</span> <span class=\"k\">true</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* We can&#39;t call foo() from here </span>\n<span class=\"cm\">   since it doesn&#39;t exist yet,</span>\n<span class=\"cm\">   but we can call bar() */</span>\n\n<span class=\"nx\">bar</span><span class=\"p\">();</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$makefoo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">function</span> <span class=\"nf\">foo</span><span class=\"p\">()</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">echo</span> <span class=\"s2\">&quot;I don&#39;t exist until program execution reaches me.</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/* Now we can safely call foo()</span>\n<span class=\"cm\">   since $makefoo evaluated to true */</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$makefoo</span><span class=\"p\">)</span> <span class=\"nx\">foo</span><span class=\"p\">();</span>\n\n<span class=\"k\">function</span> <span class=\"nf\">bar</span><span class=\"p\">()</span> \n<span class=\"p\">{</span>\n  <span class=\"k\">echo</span> <span class=\"s2\">&quot;I exist immediately upon program start.</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">?&gt;</span><span class=\"x\"></span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "php",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "PHP Functions",
    "filesize": 431,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 584,
  "fields": {
    "uuid": "aa85a6be-a3e2-4ebf-b93e-eac1410c5d68",
    "author": 2,
    "content": "<!doctype html>\r\n<html class=\"no-js\" lang=\"\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title></title>\r\n  <meta name=\"description\" content=\"\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n\r\n  <meta property=\"og:title\" content=\"\">\r\n  <meta property=\"og:type\" content=\"\">\r\n  <meta property=\"og:url\" content=\"\">\r\n  <meta property=\"og:image\" content=\"\">\r\n\r\n  <link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\">\r\n  <link rel=\"icon\" href=\"/icon.svg\" type=\"image/svg+xml\">\r\n  <link rel=\"apple-touch-icon\" href=\"icon.png\">\r\n\r\n  <link rel=\"stylesheet\" href=\"css/normalize.css\">\r\n  <link rel=\"stylesheet\" href=\"css/style.css\">\r\n\r\n  <link rel=\"manifest\" href=\"site.webmanifest\">\r\n  <meta name=\"theme-color\" content=\"#fafafa\">\r\n</head>\r\n\r\n<body>\r\n\r\n  <!-- Add your site or application content here -->\r\n  <p>Hello world! This is HTML5 Boilerplate.</p>\r\n  <script src=\"js/vendor/modernizr-{{MODERNIZR_VERSION}}.min.js\"></script>\r\n  <script src=\"js/app.js\"></script>\r\n\r\n</body>\r\n\r\n</html>",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;no-js&quot;</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&quot;utf-8&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;description&quot;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;viewport&quot;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&quot;width=device-width, initial-scale=1&quot;</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">property</span><span class=\"o\">=</span><span class=\"s\">&quot;og:title&quot;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">property</span><span class=\"o\">=</span><span class=\"s\">&quot;og:type&quot;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">property</span><span class=\"o\">=</span><span class=\"s\">&quot;og:url&quot;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">property</span><span class=\"o\">=</span><span class=\"s\">&quot;og:image&quot;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;icon&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/favicon.ico&quot;</span> <span class=\"na\">sizes</span><span class=\"o\">=</span><span class=\"s\">&quot;any&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;icon&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/icon.svg&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;image/svg+xml&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;apple-touch-icon&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;icon.png&quot;</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;css/normalize.css&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;css/style.css&quot;</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;manifest&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;site.webmanifest&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;theme-color&quot;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&quot;#fafafa&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n  <span class=\"cm\">&lt;!-- Add your site or application content here --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello world! This is HTML5 Boilerplate.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;js/vendor/modernizr-{{MODERNIZR_VERSION}}.min.js&quot;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;js/app.js&quot;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "html",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "HTML Boilerplate",
    "filesize": 998,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 585,
  "fields": {
    "uuid": "1a8c9980-8ee2-4263-a814-35592531a697",
    "author": 2,
    "content": "{\r\n    \"glossary\": {\r\n        \"title\": \"example glossary\",\r\n\t\t\"GlossDiv\": {\r\n            \"title\": \"S\",\r\n\t\t\t\"GlossList\": {\r\n                \"GlossEntry\": {\r\n                    \"ID\": \"SGML\",\r\n\t\t\t\t\t\"SortAs\": \"SGML\",\r\n\t\t\t\t\t\"GlossTerm\": \"Standard Generalized Markup Language\",\r\n\t\t\t\t\t\"Acronym\": \"SGML\",\r\n\t\t\t\t\t\"Abbrev\": \"ISO 8879:1986\",\r\n\t\t\t\t\t\"GlossDef\": {\r\n                        \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\r\n\t\t\t\t\t\t\"GlossSeeAlso\": [\"GML\", \"XML\"]\r\n                    },\r\n\t\t\t\t\t\"GlossSee\": \"markup\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">&quot;glossary&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nt\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;example glossary&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t</span><span class=\"nt\">&quot;GlossDiv&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nt\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t</span><span class=\"nt\">&quot;GlossList&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nt\">&quot;GlossEntry&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nt\">&quot;ID&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;SGML&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t\t\t</span><span class=\"nt\">&quot;SortAs&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;SGML&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t\t\t</span><span class=\"nt\">&quot;GlossTerm&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Standard Generalized Markup Language&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t\t\t</span><span class=\"nt\">&quot;Acronym&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;SGML&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t\t\t</span><span class=\"nt\">&quot;Abbrev&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;ISO 8879:1986&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t\t\t</span><span class=\"nt\">&quot;GlossDef&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nt\">&quot;para&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;A meta-markup language, used to create markup languages such as DocBook.&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t\t\t\t</span><span class=\"nt\">&quot;GlossSeeAlso&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">&quot;GML&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;XML&quot;</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">\t\t\t\t\t</span><span class=\"nt\">&quot;GlossSee&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;markup&quot;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "json",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Just a JSON example...",
    "filesize": 603,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 586,
  "fields": {
    "uuid": "72ec8487-5858-4bde-b870-f0c8f41162a8",
    "author": 2,
    "content": "public class DoubleFormatter : IFormatProvider, ICustomFormatter\r\n{\r\n  // always use dot separator for doubles\r\n  private CultureInfo enUsCulture = CultureInfo.GetCultureInfo(\"en-US\");\r\n\r\n  public string Format(string format, object arg, IFormatProvider formatProvider)\r\n  {\r\n    // format doubles to 3 decimal places\r\n    return string.Format(enUsCulture, \"{0:0.000}\", arg);\r\n  }\r\n\r\n  public object GetFormat(Type formatType)\r\n  {\r\n    return (formatType == typeof(ICustomFormatter)) ? this : null;\r\n  }\r\n}",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">DoubleFormatter</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">IFormatProvider</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ICustomFormatter</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// always use dot separator for doubles</span>\n<span class=\"w\">  </span><span class=\"k\">private</span><span class=\"w\"> </span><span class=\"n\">CultureInfo</span><span class=\"w\"> </span><span class=\"n\">enUsCulture</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">CultureInfo</span><span class=\"p\">.</span><span class=\"n\">GetCultureInfo</span><span class=\"p\">(</span><span class=\"s\">&quot;en-US&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"nf\">Format</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">object</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">IFormatProvider</span><span class=\"w\"> </span><span class=\"n\">formatProvider</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// format doubles to 3 decimal places</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"n\">Format</span><span class=\"p\">(</span><span class=\"n\">enUsCulture</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;{0:0.000}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"kt\">object</span><span class=\"w\"> </span><span class=\"nf\">GetFormat</span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">formatType</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">formatType</span><span class=\"w\"> </span><span class=\"p\">==</span><span class=\"w\"> </span><span class=\"k\">typeof</span><span class=\"p\">(</span><span class=\"n\">ICustomFormatter</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">?</span><span class=\"w\"> </span><span class=\"k\">this</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"k\">null</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "csharp",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Untitled",
    "filesize": 507,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 587,
  "fields": {
    "uuid": "64753fa4-79a8-42be-a917-055d91b281f0",
    "author": 2,
    "content": "public class Main {\r\n\r\n  public static void main(String[] args) {\r\n\r\n    // value a, b, and c\r\n    double a = 2.3, b = 4, c = 5.6;\r\n    double root1, root2;\r\n\r\n    // calculate the determinant (b2 - 4ac)\r\n    double determinant = b * b - 4 * a * c;\r\n\r\n    // check if determinant is greater than 0\r\n    if (determinant > 0) {\r\n\r\n      // two real and distinct roots\r\n      root1 = (-b + Math.sqrt(determinant)) / (2 * a);\r\n      root2 = (-b - Math.sqrt(determinant)) / (2 * a);\r\n\r\n      System.out.format(\"root1 = %.2f and root2 = %.2f\", root1, root2);\r\n    }\r\n\r\n    // check if determinant is equal to 0\r\n    else if (determinant == 0) {\r\n\r\n      // two real and equal roots\r\n      // determinant is equal to 0\r\n      // so -b + 0 == -b\r\n      root1 = root2 = -b / (2 * a);\r\n      System.out.format(\"root1 = root2 = %.2f;\", root1);\r\n    }\r\n\r\n    // if determinant is less than zero\r\n    else {\r\n\r\n      // roots are complex number and distinct\r\n      double real = -b / (2 * a);\r\n      double imaginary = Math.sqrt(-determinant) / (2 * a);\r\n      System.out.format(\"root1 = %.2f+%.2fi\", real, imaginary);\r\n      System.out.format(\"\\nroot2 = %.2f-%.2fi\", real, imaginary);\r\n    }\r\n  }\r\n}",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"kd\">class</span> <span class=\"nc\">Main</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"kd\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// value a, b, and c</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2.3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">5.6</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">root1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root2</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// calculate the determinant (b2 - 4ac)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">determinant</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// check if determinant is greater than 0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">determinant</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"c1\">// two real and distinct roots</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">root1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"na\">sqrt</span><span class=\"p\">(</span><span class=\"n\">determinant</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">root2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"na\">sqrt</span><span class=\"p\">(</span><span class=\"n\">determinant</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span><span class=\"p\">.</span><span class=\"na\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;root1 = %.2f and root2 = %.2f&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// check if determinant is equal to 0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">determinant</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"c1\">// two real and equal roots</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">// determinant is equal to 0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">// so -b + 0 == -b</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">root1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span><span class=\"p\">.</span><span class=\"na\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;root1 = root2 = %.2f;&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">root1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// if determinant is less than zero</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"c1\">// roots are complex number and distinct</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">imaginary</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"na\">sqrt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">determinant</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span><span class=\"p\">.</span><span class=\"na\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;root1 = %.2f+%.2fi&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imaginary</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span><span class=\"p\">.</span><span class=\"na\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;\\nroot2 = %.2f-%.2fi&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imaginary</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "java",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Java Program to Find Roots of a Quadratic Equation",
    "filesize": 1187,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 588,
  "fields": {
    "uuid": "1d181b0d-0301-41ab-b3f8-c022b92e2b7f",
    "author": 2,
    "content": "function serverRequest(query, callback){\r\n  setTimeout(function(){\r\n    var response = query + \"full!\";\r\n    callback(response);\r\n  },5000);\r\n}\r\n\r\nfunction getResults(results){\r\n  console.log(\"Response from the server: \" + results);\r\n}\r\n\r\nserverRequest(\"The glass is half \", getResults);\r\n\r\n// Result in console after 5 second delay:\r\n// Response from the server: The glass is half full!",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">serverRequest</span><span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">callback</span><span class=\"p\">){</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">query</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s2\">&quot;full!&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"mf\">5000</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">getResults</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">){</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Response from the server: &quot;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">results</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nx\">serverRequest</span><span class=\"p\">(</span><span class=\"s2\">&quot;The glass is half &quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">getResults</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Result in console after 5 second delay:</span><span class=\"w\"></span>\n<span class=\"c1\">// Response from the server: The glass is half full!</span><span class=\"w\"></span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "javascript",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Untitled",
    "filesize": 387,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 589,
  "fields": {
    "uuid": "99e66471-fa2a-49a0-a209-f7982638c1f9",
    "author": 2,
    "content": "-- while a is not equal to b, loop.\r\nwhile a /= b loop\r\n  Ada.Text_IO.Put_Line (\"Waiting\");\r\nend loop;\r\n\r\nif a > b then\r\n  Ada.Text_IO.Put_Line (\"Condition met\");\r\nelse\r\n  Ada.Text_IO.Put_Line (\"Condition not met\");\r\nend if;\r\n\r\nfor i in 1 .. 10 loop\r\n  Ada.Text_IO.Put (\"Iteration: \");\r\n  Ada.Text_IO.Put (i);\r\n  Ada.Text_IO.Put_Line;\r\nend loop;\r\n\r\nloop\r\n  a := a + 1;\r\n  exit when a = 10;\r\nend loop;\r\n\r\ncase i is\r\n  when 0 => Ada.Text_IO.Put (\"zero\");\r\n  when 1 => Ada.Text_IO.Put (\"one\");\r\n  when 2 => Ada.Text_IO.Put (\"two\");\r\n  -- case statements have to cover all possible cases:\r\n  when others => Ada.Text_IO.Put (\"none of the above\");\r\nend case;\r\n\r\nfor aWeekday in Weekday'Range loop               -- loop over an enumeration\r\n   Put_Line ( Weekday'Image(aWeekday) );         -- output string representation of an enumeration\r\n   if aWeekday in Working_Day then               -- check of a subtype of an enumeration\r\n      Put_Line ( \" to work for \" &\r\n               Working_Hours'Image (Work_Load(aWeekday)) ); -- access into a lookup table\r\n   end if;\r\nend loop;",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"c1\">-- while a is not equal to b, loop.</span>\n<span class=\"kr\">while</span> <span class=\"n\">a</span> <span class=\"o\">/=</span> <span class=\"n\">b</span> <span class=\"kr\">loop</span>\n  <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put_Line</span> <span class=\"p\">(</span><span class=\"s\">&quot;Waiting&quot;</span><span class=\"p\">);</span>\n<span class=\"kr\">end</span> <span class=\"kr\">loop</span><span class=\"p\">;</span>\n\n<span class=\"kr\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"kr\">then</span>\n  <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put_Line</span> <span class=\"p\">(</span><span class=\"s\">&quot;Condition met&quot;</span><span class=\"p\">);</span>\n<span class=\"kr\">else</span>\n  <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put_Line</span> <span class=\"p\">(</span><span class=\"s\">&quot;Condition not met&quot;</span><span class=\"p\">);</span>\n<span class=\"kr\">end</span> <span class=\"kr\">if</span><span class=\"p\">;</span>\n\n<span class=\"kr\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"mi\">1</span> <span class=\"p\">..</span> <span class=\"mi\">10</span> <span class=\"kr\">loop</span>\n  <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put</span> <span class=\"p\">(</span><span class=\"s\">&quot;Iteration: &quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n  <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put_Line</span><span class=\"p\">;</span>\n<span class=\"kr\">end</span> <span class=\"kr\">loop</span><span class=\"p\">;</span>\n\n<span class=\"kr\">loop</span>\n  <span class=\"n\">a</span> <span class=\"p\">:=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"kr\">exit</span> <span class=\"kr\">when</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"kr\">end</span> <span class=\"kr\">loop</span><span class=\"p\">;</span>\n\n<span class=\"kr\">case</span> <span class=\"n\">i</span> <span class=\"kr\">is</span>\n  <span class=\"kr\">when</span> <span class=\"mi\">0</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put</span> <span class=\"p\">(</span><span class=\"s\">&quot;zero&quot;</span><span class=\"p\">);</span>\n  <span class=\"kr\">when</span> <span class=\"mi\">1</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put</span> <span class=\"p\">(</span><span class=\"s\">&quot;one&quot;</span><span class=\"p\">);</span>\n  <span class=\"kr\">when</span> <span class=\"mi\">2</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put</span> <span class=\"p\">(</span><span class=\"s\">&quot;two&quot;</span><span class=\"p\">);</span>\n  <span class=\"c1\">-- case statements have to cover all possible cases:</span>\n  <span class=\"kr\">when</span> <span class=\"kr\">others</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Ada</span><span class=\"p\">.</span><span class=\"n\">Text_IO</span><span class=\"p\">.</span><span class=\"n\">Put</span> <span class=\"p\">(</span><span class=\"s\">&quot;none of the above&quot;</span><span class=\"p\">);</span>\n<span class=\"kr\">end</span> <span class=\"kr\">case</span><span class=\"p\">;</span>\n\n<span class=\"kr\">for</span> <span class=\"n\">aWeekday</span> <span class=\"ow\">in</span> <span class=\"n\">Weekday</span><span class=\"p\">&#39;</span><span class=\"na\">Range</span> <span class=\"kr\">loop</span>               <span class=\"c1\">-- loop over an enumeration</span>\n   <span class=\"n\">Put_Line</span> <span class=\"p\">(</span> <span class=\"n\">Weekday</span><span class=\"p\">&#39;</span><span class=\"na\">Image</span><span class=\"p\">(</span><span class=\"n\">aWeekday</span><span class=\"p\">)</span> <span class=\"p\">);</span>         <span class=\"c1\">-- output string representation of an enumeration</span>\n   <span class=\"kr\">if</span> <span class=\"n\">aWeekday</span> <span class=\"ow\">in</span> <span class=\"n\">Working_Day</span> <span class=\"kr\">then</span>               <span class=\"c1\">-- check of a subtype of an enumeration</span>\n      <span class=\"n\">Put_Line</span> <span class=\"p\">(</span> <span class=\"s\">&quot; to work for &quot;</span> <span class=\"o\">&amp;</span>\n               <span class=\"n\">Working_Hours</span><span class=\"p\">&#39;</span><span class=\"na\">Image</span> <span class=\"p\">(</span><span class=\"n\">Work_Load</span><span class=\"p\">(</span><span class=\"n\">aWeekday</span><span class=\"p\">))</span> <span class=\"p\">);</span> <span class=\"c1\">-- access into a lookup table</span>\n   <span class=\"kr\">end</span> <span class=\"kr\">if</span><span class=\"p\">;</span>\n<span class=\"kr\">end</span> <span class=\"kr\">loop</span><span class=\"p\">;</span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "ada",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Untitled",
    "filesize": 1072,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 590,
  "fields": {
    "uuid": "a808629f-a553-44ed-97f4-a44ed115278a",
    "author": 2,
    "content": "def alternating_characters?(s)\r\n  type = [/[aeiou]/, /[^aeiou]/].cycle\r\n  if s.start_with?(/[^aeiou]/)\r\n    type.next\r\n  end\r\n  s.chars.all? { |ch| ch.match?(type.next) }\r\nend\r\nalternating_characters?(\"ateciyu\")\r\n# true",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">alternating_characters?</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n  <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"sr\">/[aeiou]/</span><span class=\"p\">,</span> <span class=\"sr\">/[^aeiou]/</span><span class=\"o\">].</span><span class=\"n\">cycle</span>\n  <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">start_with?</span><span class=\"p\">(</span><span class=\"sr\">/[^aeiou]/</span><span class=\"p\">)</span>\n    <span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">next</span>\n  <span class=\"k\">end</span>\n  <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">chars</span><span class=\"o\">.</span><span class=\"n\">all?</span> <span class=\"p\">{</span> <span class=\"o\">|</span><span class=\"n\">ch</span><span class=\"o\">|</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">match?</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"k\">end</span>\n<span class=\"n\">alternating_characters?</span><span class=\"p\">(</span><span class=\"s2\">&quot;ateciyu&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># true</span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "ruby",
    "expiration_symbol": "PRE",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Ruby, Ruby, Ruby, Ruby Do you, do you, do you...",
    "filesize": 219,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 591,
  "fields": {
    "uuid": "de3cae7f-378c-4c75-b034-2a7f5af4e3a5",
    "author": 2,
    "content": "# Define a struct for this example\r\ndefmodule User do\r\n  defstruct email: nil\r\nend\r\n\r\n# dot syntax\r\n\"c@c.com\" = %User{email: \"c@c.com\"}.email\r\n\r\n# Underlying implementation is a map\r\n# So Map methods work\r\n\"c@c.com\" = Map.get(%User{email: \"c@c.com\"}, :email)\r\n\r\n# Pattern match to get a value\r\n%{ email: email }   = %User{email: \"c@c.com\"}\r\n%User{email: email} = %User{email: \"c@c.com\"}\r\n\r\n# Access protocol not available by default\r\n%User{email: \"c@c.com\"}[:email]\r\n#** (UndefinedFunctionError) undefined function User.fetch/2 (User does not implement the Access behaviour)\r\n#             User.fetch(%User{email: \"c@c.com\"}, :email)\r\n#    (elixir) lib/access.ex:118: Access.fetch/2\r\n#    (elixir) lib/access.ex:149: Access.get/3\r\n\r\n\r\n# Enumerable protocol not available by default\r\nEnum.filter( %User{email: \"c@c.com\"}, fn({key, _}) -> key == :email  end)\r\n#** (Protocol.UndefinedError) protocol Enumerable not implemented for %User{email: \"c@c.com\"}\r\n#    (elixir) lib/enum.ex:1: Enumerable.impl_for!/1\r\n#    (elixir) lib/enum.ex:116: Enumerable.reduce/3\r\n#    (elixir) lib/enum.ex:1477: Enum.reduce/3\r\n#    (elixir) lib/enum.ex:742: Enum.filter/2",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"c1\"># Define a struct for this example</span><span class=\"w\"></span>\n<span class=\"kd\">defmodule</span><span class=\"w\"> </span><span class=\"nc\">User</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">defstruct</span><span class=\"w\"> </span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">nil</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n\n<span class=\"c1\"># dot syntax</span><span class=\"w\"></span>\n<span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">%</span><span class=\"nc\">User</span><span class=\"p\">{</span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"w\"></span>\n\n<span class=\"c1\"># Underlying implementation is a map</span><span class=\"w\"></span>\n<span class=\"c1\"># So Map methods work</span><span class=\"w\"></span>\n<span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Map</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(%</span><span class=\"nc\">User</span><span class=\"p\">{</span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"ss\">:email</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"c1\"># Pattern match to get a value</span><span class=\"w\"></span>\n<span class=\"p\">%{</span><span class=\"w\"> </span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">email</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">%</span><span class=\"nc\">User</span><span class=\"p\">{</span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">%</span><span class=\"nc\">User</span><span class=\"p\">{</span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">email</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">%</span><span class=\"nc\">User</span><span class=\"p\">{</span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\"># Access protocol not available by default</span><span class=\"w\"></span>\n<span class=\"p\">%</span><span class=\"nc\">User</span><span class=\"p\">{</span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"p\">}[</span><span class=\"ss\">:email</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"c1\">#** (UndefinedFunctionError) undefined function User.fetch/2 (User does not implement the Access behaviour)</span><span class=\"w\"></span>\n<span class=\"c1\">#             User.fetch(%User{email: &quot;c@c.com&quot;}, :email)</span><span class=\"w\"></span>\n<span class=\"c1\">#    (elixir) lib/access.ex:118: Access.fetch/2</span><span class=\"w\"></span>\n<span class=\"c1\">#    (elixir) lib/access.ex:149: Access.get/3</span><span class=\"w\"></span>\n\n\n<span class=\"c1\"># Enumerable protocol not available by default</span><span class=\"w\"></span>\n<span class=\"nc\">Enum</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"p\">%</span><span class=\"nc\">User</span><span class=\"p\">{</span><span class=\"ss\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;c@c.com&quot;</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">({</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"ss\">:email</span><span class=\"w\">  </span><span class=\"k\">end</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c1\">#** (Protocol.UndefinedError) protocol Enumerable not implemented for %User{email: &quot;c@c.com&quot;}</span><span class=\"w\"></span>\n<span class=\"c1\">#    (elixir) lib/enum.ex:1: Enumerable.impl_for!/1</span><span class=\"w\"></span>\n<span class=\"c1\">#    (elixir) lib/enum.ex:116: Enumerable.reduce/3</span><span class=\"w\"></span>\n<span class=\"c1\">#    (elixir) lib/enum.ex:1477: Enum.reduce/3</span><span class=\"w\"></span>\n<span class=\"c1\">#    (elixir) lib/enum.ex:742: Enum.filter/2</span><span class=\"w\"></span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "elixir",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Get a value from a Struct",
    "filesize": 1149,
    "is_active": true
  }
},
{
  "model": "pastes.paste",
  "pk": 592,
  "fields": {
    "uuid": "af646d05-8ea0-46ab-be01-232f6b8d8801",
    "author": 2,
    "content": "from flask import url_for\r\n\r\n@app.route('/')\r\ndef index():\r\n    return 'index'\r\n\r\n@app.route('/login')\r\ndef login():\r\n    return 'login'\r\n\r\n@app.route('/user/<username>')\r\ndef profile(username):\r\n    return f'{username}\\'s profile'\r\n\r\nwith app.test_request_context():\r\n    print(url_for('index'))\r\n    print(url_for('login'))\r\n    print(url_for('login', next='/'))\r\n    print(url_for('profile', username='John Doe'))",
    "content_html": "<div class=\"highlight\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td><td class=\"code\"><div><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">url_for</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;index&#39;</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">&#39;/login&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;login&#39;</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">&#39;/user/&lt;username&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">profile</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"se\">\\&#39;</span><span class=\"s1\">s profile&#39;</span>\n\n<span class=\"k\">with</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">test_request_context</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url_for</span><span class=\"p\">(</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url_for</span><span class=\"p\">(</span><span class=\"s1\">&#39;login&#39;</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url_for</span><span class=\"p\">(</span><span class=\"s1\">&#39;login&#39;</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url_for</span><span class=\"p\">(</span><span class=\"s1\">&#39;profile&#39;</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;John Doe&#39;</span><span class=\"p\">))</span>\n</pre></div></td></tr></table></div>\n",
    "syntax": "python",
    "expiration_symbol": "",
    "expiration_date": null,
    "exposure": "PU",
    "folder": null,
    "password": "",
    "burn_after_read": false,
    "title": "Flask",
    "filesize": 416,
    "is_active": true
  }
}
]
